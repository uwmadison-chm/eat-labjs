{
  "components": {
    "1": {
      "id": "1",
      "type": "lab.canvas.Screen",
      "content": [
        {
          "type": "i-text",
          "version": "2.7.0",
          "originX": "center",
          "originY": "center",
          "left": 0,
          "top": -214,
          "width": 754.88,
          "height": 120.05,
          "fill": "#ffffff",
          "stroke": "#dddddd",
          "strokeWidth": 1,
          "strokeDashArray": null,
          "strokeLineCap": "butt",
          "strokeDashOffset": 0,
          "strokeLineJoin": "round",
          "strokeMiterLimit": 4,
          "scaleX": 1,
          "scaleY": 1,
          "angle": 0,
          "flipX": false,
          "flipY": false,
          "opacity": 1,
          "shadow": null,
          "visible": true,
          "clipTo": null,
          "backgroundColor": "",
          "fillRule": "nonzero",
          "paintFirst": "fill",
          "globalCompositeOperation": "source-over",
          "transformMatrix": null,
          "skewX": 0,
          "skewY": 0,
          "text": "Your task today is to watch some videos of\npeople telling personal stories, and rate\nhow positive or negative that person is feeling.",
          "fontSize": 32,
          "fontWeight": "normal",
          "fontFamily": "sans-serif",
          "fontStyle": "normal",
          "lineHeight": 1.16,
          "underline": false,
          "overline": false,
          "linethrough": false,
          "textAlign": "center",
          "textBackgroundColor": "",
          "charSpacing": 0,
          "id": "3",
          "styles": {}
        },
        {
          "type": "i-text",
          "version": "2.7.0",
          "originX": "center",
          "originY": "center",
          "left": 0,
          "top": 263,
          "width": 308.34,
          "height": 27.12,
          "fill": "#ffffff",
          "stroke": "#dddddd",
          "strokeWidth": 1,
          "strokeDashArray": null,
          "strokeLineCap": "butt",
          "strokeDashOffset": 0,
          "strokeLineJoin": "round",
          "strokeMiterLimit": 4,
          "scaleX": 1,
          "scaleY": 1,
          "angle": 0,
          "flipX": false,
          "flipY": false,
          "opacity": 1,
          "shadow": null,
          "visible": true,
          "clipTo": null,
          "backgroundColor": "",
          "fillRule": "nonzero",
          "paintFirst": "fill",
          "globalCompositeOperation": "source-over",
          "transformMatrix": null,
          "skewX": 0,
          "skewY": 0,
          "text": "Press any key to continue",
          "fontSize": "24",
          "fontWeight": "normal",
          "fontFamily": "sans-serif",
          "fontStyle": "normal",
          "lineHeight": 1.16,
          "underline": false,
          "overline": false,
          "linethrough": false,
          "textAlign": "center",
          "textBackgroundColor": "",
          "charSpacing": 0,
          "id": "25",
          "styles": {}
        },
        {
          "type": "i-text",
          "version": "2.7.0",
          "originX": "center",
          "originY": "center",
          "left": 0,
          "top": -25,
          "width": 758.34,
          "height": 162,
          "fill": "#ffffff",
          "stroke": "#dddddd",
          "strokeWidth": 1,
          "strokeDashArray": null,
          "strokeLineCap": "butt",
          "strokeDashOffset": 0,
          "strokeLineJoin": "round",
          "strokeMiterLimit": 4,
          "scaleX": 1,
          "scaleY": 1,
          "angle": 0,
          "flipX": false,
          "flipY": false,
          "opacity": 1,
          "shadow": null,
          "visible": true,
          "clipTo": null,
          "backgroundColor": "",
          "fillRule": "nonzero",
          "paintFirst": "fill",
          "globalCompositeOperation": "source-over",
          "transformMatrix": null,
          "skewX": 0,
          "skewY": 0,
          "text": "Your task is to watch closely and make ratings\nby moving the mouse or trackpad.\nPlease adjust your rating throughout the video,\nwhenever the emotion changes.",
          "fontSize": 32,
          "fontWeight": "normal",
          "fontFamily": "sans-serif",
          "fontStyle": "normal",
          "lineHeight": 1.16,
          "underline": false,
          "overline": false,
          "linethrough": false,
          "textAlign": "center",
          "textBackgroundColor": "",
          "charSpacing": 0,
          "id": "47",
          "styles": {}
        },
        {
          "type": "i-text",
          "version": "2.7.0",
          "originX": "center",
          "originY": "center",
          "left": 0,
          "top": 163,
          "width": 655.36,
          "height": 120.05,
          "fill": "#ffffff",
          "stroke": "#dddddd",
          "strokeWidth": 1,
          "strokeDashArray": null,
          "strokeLineCap": "butt",
          "strokeDashOffset": 0,
          "strokeLineJoin": "round",
          "strokeMiterLimit": 4,
          "scaleX": 1,
          "scaleY": 1,
          "angle": 0,
          "flipX": false,
          "flipY": false,
          "opacity": 1,
          "shadow": null,
          "visible": true,
          "clipTo": null,
          "backgroundColor": "",
          "fillRule": "nonzero",
          "paintFirst": "fill",
          "globalCompositeOperation": "source-over",
          "transformMatrix": null,
          "skewX": 0,
          "skewY": 0,
          "text": "Please don't resize your window after we\nhave started. We will start with \nan example video.",
          "fontSize": 32,
          "fontWeight": "normal",
          "fontFamily": "sans-serif",
          "fontStyle": "normal",
          "lineHeight": 1.16,
          "underline": false,
          "overline": false,
          "linethrough": false,
          "textAlign": "center",
          "textBackgroundColor": "",
          "charSpacing": 0,
          "id": "33",
          "styles": {}
        }
      ],
      "files": {
        "rows": []
      },
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "keypress",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": []
      },
      "viewport": [
        800,
        600
      ],
      "title": "Instructions Start",
      "_tab": "Content"
    },
    "2": {
      "id": "2",
      "type": "lab.flow.Sequence",
      "children": [
        "1",
        "4",
        "5",
        "8",
        "6"
      ],
      "files": {
        "rows": []
      },
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "init",
              "message": "before:prepare",
              "code": "this.state.DEBUG = false;\n\nfunction getParameterByName(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\nthis.state.ppt = getParameterByName('PPT') || 0;\nthis.state.session = getParameterByName('session') || 0;\nthis.state.seed = String(this.state.ppt) + '/' + String(this.state.session);\nif (this.state.DEBUG) {\n  console.log(\"Random seed is\", this.state.seed);\n}\n\nthis.state.random = new lab.util.Random({\n  algorithm: 'alea',\n  seed: this.state.seed\n});\n\n// Make a predictable pseudorandom number generator based on ppt and session id\nthis.state.rng = new Math.seedrandom(this.state.seed);\n\nthis.state.video_location = \"https://webtasks.keck.waisman.wisc.edu/pte/\";\n\nthis.state.instructions_video = \"3-EA403-P1.mp4\";\n\n// Init the possible video lists, so we can pull without replacement\nthis.state.positive_videos = [\n\"1-EA414-P2.mp4\",\n\"5-EA416-P1.mp4\",\n\"6-EA418-P2.mp4\",\n];\n\nthis.state.negative_videos = [\n\"2-EA414-N4.mp4\",\n\"8-EA416-N1.mp4\",\n\"1-EA418-N3.mp4\",\n];\n\n// There must be a better way to get the trial number,\n// but let's just count it in state\nthis.state.trial_count = 0;"
            }
          ]
        ]
      },
      "title": "Experiment",
      "_tab": "Scripts"
    },
    "3": {
      "id": "3",
      "type": "lab.html.Screen",
      "files": {
        "rows": []
      },
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "Video player",
              "message": "run",
              "code": "var comp = this;\nvar body = document.getElementsByTagName('body')[0];\nvar container = document.getElementsByClassName(\"container\")[0];\nvar title = document.getElementById(\"title\");\nvar left_text = document.getElementById(\"left_text\");\nvar right_text = document.getElementById(\"right_text\");\nvar player_container = document.getElementById(\"player_container\");\nvar player = document.getElementById(\"player\");\nvar click_to_play = document.getElementById(\"click_to_play\");\n\nvar rating = document.getElementById(\"rating\");\nvar marker = document.getElementById(\"marker\");\nvar line = document.getElementById(\"line\");\n\nvar canplay = false;\nvar canrate = false;\nvar start_time;\nvar data = [];\n\nvar rating_width;\nvar width;\nvar margin; \nvar marker_width;\nvar marker_max;\n\n\nif (this.parameters.cue == 'gaze') {\n    title.innerHTML = \"Where is this person looking?\";\n    left_text.innerHTML = \"Left\";\n    right_text.innerHTML = \"Right\";\n} else if (this.parameters.cue == 'self') {\n    title.innerHTML = \"How are you feeling?\";\n    left_text.innerHTML = \"Very Negative\";\n    right_text.innerHTML = \"Very Positive\";\n} else {\n    title.innerHTML = \"How did this person feel?\";\n    left_text.innerHTML = \"Very Negative\";\n    right_text.innerHTML = \"Very Positive\";\n}\n\n// Pull a video off by pseudo-random\nvar video_filename;\nvar video_bin;\nif (this.parameters.affect == \"positive\") {\n  video_bin = this.state.positive_videos;\n} else {\n  video_bin = this.state.negative_videos;\n}\n\nvideo_index = Math.trunc(this.state.rng() * video_bin.length);\nvideo_filename = video_bin[video_index];\nvideo_bin.splice(video_index, 1);\n\n// Load some stuff from state into parameters to make processing data easier\nthis.parameters.ppt = this.state.ppt;\nthis.parameters.session = this.state.session;\n\nthis.state.trial_count += 1;\nthis.parameters.trial_count = this.state.trial_count;\nthis.parameters.video_filename = video_filename;\n\nplayer.src = this.state.video_location + video_filename;\n\nfunction userResize(){\n  rating_width = rating.offsetWidth;\n  width = window.innerWidth;\n  margin = (width / 2.0) - (rating_width / 2.0); \n  marker_width = marker.clientWidth;\n  line_width = line.clientWidth;\n  marker_max = line_width + 4;\n}\n\nfunction centerMarker(){\n  marker.style.left = String(rating_width / 2 - (marker_width * 0.5)) + \"px\";\n}\n\nwindow.performance = window.performance || {};\nperformance.now = (function() {\n    return performance.now    ||\n        performance.mozNow    ||\n        performance.msNow     ||\n        performance.oNow      ||\n        performance.webkitNow ||            \n        Date.now  /*none found - fallback to browser default */\n})();\n\nfunction hideCursor(){\n  body.className = 'nocursor';\n}\n\nfunction showCursor(){\n  body.className = '';\n}\n\nfunction startVideo(){\n  if (canplay) {\n    player_container.style.display = \"block\";\n    player.style.display = \"block\";\n    rating.style.display = \"block\";\n    userResize();\n\n    player.play();\n  }\n}\n\nfunction mouseMove(e){\n  if (!canrate) {\n    return;\n  }\n\n  current_x = e.pageX - margin;\n\n  // constrain to rating box\n  if (current_x < 0) {\n    current_x = 0\n  } else if (current_x > marker_max) {\n    current_x = marker_max\n  }\n\n  marker.style.left = current_x + \"px\";\n\n  // normalize x by possible max when storing\n  var stored_x = current_x / marker_max\n  console.log(stored_x);\n  data.push({\n    value: stored_x,\n    playerTime: player.currentTime,\n    browserTime: performance.now() - start_time,\n  });\n}\n\ndocument.addEventListener('mousemove', mouseMove, false);\ndocument.addEventListener('resize', userResize, true);\n\nplayer.addEventListener(\"canplay\", function() {\n  canplay = true;\n  startVideo();\n});\n\nplayer.addEventListener(\"click\", function() {\n  if (canplay) {\n    player.play();\n  }\n});\n\nplayer.addEventListener(\"play\", function() {\n  canplay = false;\n  canrate = true;\n  click_to_play.style.display = \"none\";\n\n  centerMarker();\n  hideCursor();\n  \n  start_time = performance.now();\n});\n\nplayer.addEventListener(\"ended\", function() {\n  showCursor();\n  // Shove data into the response and go to next component\n  comp.respond(data);\n});\n\n/*\nplayer.addEventListener(\"click\", function() {\n  startVideo();\n});\n*/\n"
            }
          ]
        ]
      },
      "title": "Video",
      "content": "\n<div id=\"grid_container\">\n  <div id=\"title_container\">\n    <h1 id=\"title\">How is this person feeling?</h1>\n  </div>\n\n  <div id=\"player_container\">\n    <video id=\"player\" preload width=\"100%\" type=\"video/mp4\">\n    </video>\n  </div>\n\n  <div id=\"click_to_play\">\n    <h4>Click to play video</h4>\n  </div>\n\n  <div id=\"rating\">\n    <div id=\"left_text\">Left</div>\n    <div id=\"right_text\">Right</div>\n    <div id=\"bar\">\n      <div id=\"marker\">\n        &nbsp;\n      </div>\n      <div id=\"line\">\n        <span id=\"middle\"></span>\n      </div>\n    </div>\n  </div>\n</div>",
      "_tab": "Scripts",
      "timeout": ""
    },
    "4": {
      "id": "4",
      "type": "lab.html.Screen",
      "files": {
        "rows": []
      },
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "Video player",
              "message": "run",
              "code": "var comp = this;\nvar body = document.getElementsByTagName('body')[0];\nvar container = document.getElementsByClassName(\"container\")[0];\nvar title = document.getElementById(\"title\");\nvar left_text = document.getElementById(\"left_text\");\nvar right_text = document.getElementById(\"right_text\");\nvar player_container = document.getElementById(\"player_container\");\nvar player = document.getElementById(\"player\");\n\nvar rating = document.getElementById(\"rating\");\nvar marker = document.getElementById(\"marker\");\nvar line = document.getElementById(\"line\");\n\nvar all_instructions = document.getElementsByClassName(\"instructions\");\nvar instructions1 = all_instructions[0];\nvar instructions2 = all_instructions[1];\n\nvar canplay = false;\nvar canrate = false;\nvar start_time;\nvar data = [];\nvar move_timer;\nvar good_moves = 0;\n\nvar rating_width;\nvar width;\nvar margin; \nvar marker_width;\nvar marker_max;\n\ntitle.innerHTML = \"SAMPLE VIDEO: How did this person feel?\";\nleft_text.innerHTML = \"Very Negative\";\nright_text.innerHTML = \"Very Positive\";\n\n\nplayer.src = this.state.video_location + this.state.instructions_video;\n\nfunction userResize(){\n  rating_width = rating.offsetWidth;\n  width = window.innerWidth;\n  margin = (width - rating_width) / 2.0; \n  marker_width = marker.clientWidth;\n  line_width = line.clientWidth;\n  marker_max = line_width + 4;\n}\n\nfunction centerMarker(){\n  marker.style.left = String(rating_width / 2 - (marker_width * 0.5)) + \"px\";\n}\n\nwindow.performance = window.performance || {};\nperformance.now = (function() {\n    return performance.now    ||\n        performance.mozNow    ||\n        performance.msNow     ||\n        performance.oNow      ||\n        performance.webkitNow ||            \n        Date.now  /*none found - fallback to browser default */\n})();\n\nfunction hideCursor(){\n  body.className = 'nocursor';\n}\n\nfunction showCursor(){\n  body.className = '';\n}\n\nfunction checkMove(){\n  // Look in data and see if the user is moving the mouse\n  var point = data[data.length - 1];\n  if (!point) {\n    instructions1.className = 'instructions pulse';\n    instructions2.className = 'instructions pulse';\n  } else {\n    var now = performance.now() - start_time;\n    var idle_time = now - point.browserTime;\n    if (idle_time < 10000) {\n      good_moves += 1;\n      instructions1.className = 'instructions';\n      instructions2.className = 'instructions';\n      if (good_moves >= 3) {\n        player.pause();\n        comp.respond(data);\n        return;\n      }\n    } else {\n      // Prompt the user to move\n      instructions1.className = 'instructions pulse';\n      instructions2.className = 'instructions pulse';\n    }\n  }\n  move_timer = window.setTimeout(checkMove, 10000);\n}\n\nfunction startVideo(){\n  if (canplay) {\n    player_container.style.display = \"block\";\n    player.style.display = \"block\";\n    rating.style.display = \"block\";\n    userResize();\n\n    player.play();\n\n    // Hook up event to prompt user to move mouse\n    move_timer = window.setTimeout(checkMove, 10000);\n  }\n}\n\nfunction mouseMove(e){\n  if (!canrate) {\n    return;\n  }\n\n  current_x = e.pageX - margin;\n\n  // constrain to rating box\n  if (current_x < 0) {\n    current_x = 0\n  } else if (current_x > marker_max) {\n    current_x = marker_max\n  }\n\n  marker.style.left = current_x + \"px\";\n\n  // normalize x by max width when storing\n  var stored_x = current_x / marker_max\n  data.push({\n    value: stored_x,\n    playerTime: player.currentTime,\n    browserTime: performance.now() - start_time,\n  });\n}\n\ndocument.addEventListener('mousemove', mouseMove, false);\ndocument.addEventListener('resize', userResize, true);\n\nplayer.addEventListener(\"canplay\", function() {\n  canplay = true;\n  startVideo();\n});\n\nplayer.addEventListener(\"click\", function() {\n  if (canplay) {\n    player.play();\n  }\n});\n\nplayer.addEventListener(\"play\", function() {\n  canplay = false;\n  canrate = true;\n\n  centerMarker();\n  hideCursor();\n  \n  start_time = performance.now();\n});\n\nplayer.addEventListener(\"ended\", function() {\n  // Shove data into the response and go to next component\n  comp.respond(data);\n});\n\n/*\nplayer.addEventListener(\"click\", function() {\n  startVideo();\n});\n*/\n"
            }
          ]
        ]
      },
      "title": "Instructions Video",
      "content": "\n<div id=\"grid_container\">\n  <div id=\"title_container\">\n    <h1 id=\"title\">SAMPLE VIDEO: How is this person feeling?</h1>\n  </div>\n\n  <div id=\"player_container\">\n    <div id=\"instructions_container\">\n      <p class=\"instructions\">Please adjust your rating throughout the video, whenever the emotion changes.</p>\n      <video id=\"player\" preload type=\"video/mp4\">\n      </video>\n      <p class=\"instructions\">Move your mouse or trackpad to adjust the rating.</p> \n    </div>\n  </div>\n  \n  <div id=\"rating\">\n    <div id=\"left_text\">Left</div>\n    <div id=\"right_text\">Right</div>\n    <div id=\"bar\">\n      <div id=\"marker\">\n        &nbsp;\n      </div>\n      <div id=\"line\">\n        <span id=\"middle\"></span>\n      </div>\n    </div>\n  </div>\n\n</div>",
      "_tab": "Scripts",
      "timeout": ""
    },
    "5": {
      "id": "5",
      "type": "lab.canvas.Screen",
      "content": [
        {
          "type": "i-text",
          "version": "2.7.0",
          "originX": "center",
          "originY": "center",
          "left": 0,
          "top": 263,
          "width": 308.34,
          "height": 27.12,
          "fill": "#ffffff",
          "stroke": "#dddddd",
          "strokeWidth": 1,
          "strokeDashArray": null,
          "strokeLineCap": "butt",
          "strokeDashOffset": 0,
          "strokeLineJoin": "round",
          "strokeMiterLimit": 4,
          "scaleX": 1,
          "scaleY": 1,
          "angle": 0,
          "flipX": false,
          "flipY": false,
          "opacity": 1,
          "shadow": null,
          "visible": true,
          "clipTo": null,
          "backgroundColor": "",
          "fillRule": "nonzero",
          "paintFirst": "fill",
          "globalCompositeOperation": "source-over",
          "transformMatrix": null,
          "skewX": 0,
          "skewY": 0,
          "text": "Press any key to continue",
          "fontSize": "24",
          "fontWeight": "normal",
          "fontFamily": "sans-serif",
          "fontStyle": "normal",
          "lineHeight": 1.16,
          "underline": false,
          "overline": false,
          "linethrough": false,
          "textAlign": "center",
          "textBackgroundColor": "",
          "charSpacing": 0,
          "id": "25",
          "styles": {}
        },
        {
          "type": "i-text",
          "version": "2.7.0",
          "originX": "center",
          "originY": "center",
          "left": 0,
          "top": 100,
          "width": 659.84,
          "height": 120.05,
          "fill": "#ffffff",
          "stroke": "#dddddd",
          "strokeWidth": 1,
          "strokeDashArray": null,
          "strokeLineCap": "butt",
          "strokeDashOffset": 0,
          "strokeLineJoin": "round",
          "strokeMiterLimit": 4,
          "scaleX": 1,
          "scaleY": 1,
          "angle": 0,
          "flipX": false,
          "flipY": false,
          "opacity": 1,
          "shadow": null,
          "visible": true,
          "clipTo": null,
          "backgroundColor": "",
          "fillRule": "nonzero",
          "paintFirst": "fill",
          "globalCompositeOperation": "source-over",
          "transformMatrix": null,
          "skewX": 0,
          "skewY": 0,
          "text": "When you are ready to watch the videos,\nplease press a key. This will take about\n10 minutes in total.",
          "fontSize": 32,
          "fontWeight": "normal",
          "fontFamily": "sans-serif",
          "fontStyle": "normal",
          "lineHeight": 1.16,
          "underline": false,
          "overline": false,
          "linethrough": false,
          "textAlign": "center",
          "textBackgroundColor": "",
          "charSpacing": 0,
          "id": "47",
          "styles": {}
        },
        {
          "type": "i-text",
          "version": "2.7.0",
          "originX": "center",
          "originY": "center",
          "left": 0,
          "top": -200,
          "width": 160.8,
          "height": 36.16,
          "fill": "#ffffff",
          "stroke": "#dddddd",
          "strokeWidth": 1,
          "strokeDashArray": null,
          "strokeLineCap": "butt",
          "strokeDashOffset": 0,
          "strokeLineJoin": "round",
          "strokeMiterLimit": 4,
          "scaleX": 1,
          "scaleY": 1,
          "angle": 0,
          "flipX": false,
          "flipY": false,
          "opacity": 1,
          "shadow": null,
          "visible": true,
          "clipTo": null,
          "backgroundColor": "",
          "fillRule": "nonzero",
          "paintFirst": "fill",
          "globalCompositeOperation": "source-over",
          "transformMatrix": null,
          "skewX": 0,
          "skewY": 0,
          "text": "Great job!",
          "fontSize": 32,
          "fontWeight": "bold",
          "fontFamily": "sans-serif",
          "fontStyle": "normal",
          "lineHeight": 1.16,
          "underline": false,
          "overline": false,
          "linethrough": false,
          "textAlign": "center",
          "textBackgroundColor": "",
          "charSpacing": 0,
          "id": "13",
          "styles": {}
        },
        {
          "type": "i-text",
          "version": "2.7.0",
          "originX": "center",
          "originY": "center",
          "left": 0,
          "top": -75,
          "width": 687.92,
          "height": 78.11,
          "fill": "#d6341a",
          "stroke": "#fcbb0a",
          "strokeWidth": 1,
          "strokeDashArray": null,
          "strokeLineCap": "butt",
          "strokeDashOffset": 0,
          "strokeLineJoin": "round",
          "strokeMiterLimit": 4,
          "scaleX": 1,
          "scaleY": 1,
          "angle": 0,
          "flipX": false,
          "flipY": false,
          "opacity": 1,
          "shadow": null,
          "visible": true,
          "clipTo": null,
          "backgroundColor": "",
          "fillRule": "nonzero",
          "paintFirst": "fill",
          "globalCompositeOperation": "source-over",
          "transformMatrix": null,
          "skewX": 0,
          "skewY": 0,
          "text": "Don't forget to move the slider throughout\nthe video, whenever the emotion changes.",
          "fontSize": 32,
          "fontWeight": "normal",
          "fontFamily": "sans-serif",
          "fontStyle": "normal",
          "lineHeight": 1.16,
          "underline": false,
          "overline": false,
          "linethrough": false,
          "textAlign": "center",
          "textBackgroundColor": "",
          "charSpacing": 0,
          "id": "23",
          "styles": {}
        }
      ],
      "files": {
        "rows": []
      },
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "keypress",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": []
      },
      "viewport": [
        800,
        600
      ],
      "title": "Instructions End",
      "_tab": "Content"
    },
    "6": {
      "id": "6",
      "type": "lab.canvas.Screen",
      "content": [
        {
          "type": "i-text",
          "version": "2.7.0",
          "originX": "center",
          "originY": "center",
          "left": 0,
          "top": 0,
          "width": 734.4,
          "height": 120.05,
          "fill": "#ffffff",
          "stroke": "#dddddd",
          "strokeWidth": 1,
          "strokeDashArray": null,
          "strokeLineCap": "butt",
          "strokeDashOffset": 0,
          "strokeLineJoin": "round",
          "strokeMiterLimit": 4,
          "scaleX": 1,
          "scaleY": 1,
          "angle": 0,
          "flipX": false,
          "flipY": false,
          "opacity": 1,
          "shadow": null,
          "visible": true,
          "clipTo": null,
          "backgroundColor": "",
          "fillRule": "nonzero",
          "paintFirst": "fill",
          "globalCompositeOperation": "source-over",
          "transformMatrix": null,
          "skewX": 0,
          "skewY": 0,
          "text": "Thanks for participating!\n\nPlease close this tab and return to the survey.",
          "fontSize": 32,
          "fontWeight": "normal",
          "fontFamily": "sans-serif",
          "fontStyle": "normal",
          "lineHeight": 1.16,
          "underline": false,
          "overline": false,
          "linethrough": false,
          "textAlign": "center",
          "textBackgroundColor": "",
          "charSpacing": 0,
          "id": "47",
          "styles": {}
        }
      ],
      "files": {
        "rows": []
      },
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "keypress",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": []
      },
      "viewport": [
        800,
        600
      ],
      "title": "End Screen",
      "_tab": "Content",
      "timeout": "1000"
    },
    "8": {
      "id": "8",
      "type": "lab.flow.Loop",
      "children": [
        "12"
      ],
      "files": {
        "rows": []
      },
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "templateParameters": {
        "columns": [
          {
            "name": "cue",
            "type": "string"
          },
          {
            "name": "affect",
            "type": "string"
          }
        ],
        "rows": [
          [
            "other",
            "positive"
          ],
          [
            "other",
            "negative"
          ],
          [
            "other",
            "positive"
          ],
          [
            "other",
            "negative"
          ],
          [
            "other",
            "positive"
          ],
          [
            "other",
            "negative"
          ]
        ]
      },
      "sample": {
        "mode": "draw-shuffle",
        "n": "6"
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "pseudorandom init",
              "message": "before:prepare",
              "code": "this.random = this.state.random;"
            }
          ]
        ]
      },
      "title": "Trials",
      "_tab": "Content"
    },
    "12": {
      "id": "12",
      "type": "lab.flow.Sequence",
      "children": [
        "13",
        "3"
      ],
      "files": {
        "rows": []
      },
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "",
              "message": "",
              "code": ""
            }
          ]
        ]
      },
      "title": "Trial sequence"
    },
    "13": {
      "id": "13",
      "type": "lab.canvas.Screen",
      "content": [
        {
          "type": "i-text",
          "version": "2.7.0",
          "originX": "center",
          "originY": "center",
          "left": 0,
          "top": 0,
          "width": 40.68,
          "height": 81.36,
          "fill": "#ffffff",
          "stroke": "#000000",
          "strokeWidth": 1,
          "strokeDashArray": null,
          "strokeLineCap": "butt",
          "strokeDashOffset": 0,
          "strokeLineJoin": "round",
          "strokeMiterLimit": 4,
          "scaleX": 1,
          "scaleY": 1,
          "angle": 0,
          "flipX": false,
          "flipY": false,
          "opacity": 1,
          "shadow": null,
          "visible": true,
          "clipTo": null,
          "backgroundColor": "",
          "fillRule": "nonzero",
          "paintFirst": "fill",
          "globalCompositeOperation": "source-over",
          "transformMatrix": null,
          "skewX": 0,
          "skewY": 0,
          "text": "+",
          "fontSize": "72",
          "fontWeight": "normal",
          "fontFamily": "Times New Roman",
          "fontStyle": "normal",
          "lineHeight": 1.16,
          "underline": false,
          "overline": false,
          "linethrough": false,
          "textAlign": "center",
          "textBackgroundColor": "",
          "charSpacing": 0,
          "id": "88",
          "styles": {}
        }
      ],
      "files": {
        "rows": []
      },
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "",
              "message": "",
              "code": ""
            }
          ]
        ]
      },
      "viewport": [
        800,
        600
      ],
      "title": "Fixation cross",
      "_tab": "Behavior",
      "timeout": "2000"
    },
    "root": {
      "id": "root",
      "title": "root",
      "type": "lab.flow.Sequence",
      "children": [
        "2"
      ],
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "plugins": [
        {
          "type": "lab.plugins.Metadata"
        }
      ],
      "metadata": {
        "title": "EATS",
        "description": "",
        "repository": "",
        "contributors": "Dan Fitch <dfitch@wisc.edu>"
      }
    }
  },
  "version": [
    19,
    1,
    0
  ],
  "files": {
    "files": {
      "index.html": {
        "content": "data:text/html,%3C!doctype%20html%3E%0A%3Chtml%3E%0A%3Chead%3E%0A%20%20%3Cmeta%20charset%3D%22utf-8%22%3E%0A%20%20%3Ctitle%3EExperiment%3C%2Ftitle%3E%0A%20%20%3C!--%20viewport%20setup%20--%3E%0A%20%20%3Cmeta%20name%3D%22viewport%22%20content%3D%22width%3Ddevice-width%2C%20initial-scale%3D1%22%3E%0A%20%20%3C!--%20lab.js%20library%20and%20experiment%20code%20--%3E%0A%20%20%24%7B%20header%20%7D%0A%3C%2Fhead%3E%0A%3Cbody%3E%0A%20%20%3C!--%20If%20you'd%20rather%20have%20a%20container%20with%20a%20fixed%20width%0A%20%20%20%20%20%20%20and%20variable%20height%2C%20try%20removing%20the%20fullscreen%20class%20below%20--%3E%0A%20%20%3Cdiv%20class%3D%22container%20fullscreen%22%20data-labjs-section%3D%22main%22%3E%0A%20%20%20%20%3Cmain%20class%3D%22content-vertical-center%20content-horizontal-center%22%3E%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Ch2%3ELoading%20Experiment%3C%2Fh2%3E%0A%20%20%20%20%20%20%20%20%3Cp%3EThe%20experiment%20is%20loading%20and%20should%20start%20in%20a%20few%20seconds%3C%2Fp%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fmain%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fbody%3E%0A%3C%2Fhtml%3E%0A",
        "source": "library"
      },
      "style.css": {
        "content": "data:text/css,body%20%7B%0A%20%20color%3A%20white%3B%0A%20%20background-color%3A%20black%3B%0A%7D%0A%0A.alert%20%7B%0A%20%20background-color%3A%20%23666%3B%0A%7D%0A%0Ah1%2C%20h2%2C%20h3%2C%20h4%2C%20h5%2C%20h6%2C%20p%20%7B%0A%20%20margin%3A%200%3B%0A%7D%0A%0A.container%20%7B%20border%3A%20none%3B%20%7D%0A%0A.nocursor%20%7B%20cursor%3A%20none%3B%20%7D%0A%0A%23grid_container%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20align-items%3A%20end%3B%0A%20%20grid-template-columns%3A%201fr%3B%0A%20%20grid-template-rows%3A%20auto%201fr%20auto%3B%0A%20%20width%3A%20100%25%3B%0A%20%20height%3A%2090vh%3B%0A%20%20margin%3A%200%3B%0A%20%20padding%3A%200%202em%3B%0A%7D%0A%0A%23instructions_container%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%208em%20auto%208em%3B%0A%20%20grid-template-rows%3A%201fr%3B%0A%20%20align-items%3A%20stretch%3B%0A%20%20width%3A%20100%25%3B%0A%20%20margin%3A%200%3B%0A%7D%0A%0Avideo%3A%3A-webkit-media-controls-fullscreen-button%2Cvideo%3A%3A-webkit-media-controls-play-button%2C%20video%3A%3A-webkit-media-controls-pausebutton%20%7B%0A%20%20%20%20display%3A%20none%3B%0A%7D%0A%0A%23title%2C%20.instructions%20%7B%0A%20%20text-align%3A%20center%3B%0A%7D%0A%0A.instructions%20%7B%0A%20%20align-self%3A%20end%3B%0A%7D%0A%0A%23player_container%20%7B%0A%20%20display%3A%20none%3B%0A%20%20margin%3A%200%20auto%3B%0A%20%20max-height%3A%2050vh%3B%0A%7D%0A%0A%23player%20%7B%0A%20%20width%3A%20100%25%3B%0A%20%20height%3A%20100%25%3B%0A%20%20max-height%3A%2050vh%3B%0A%20%20max-width%3A%2090vw%3B%0A%7D%0A%0A%23rating%20%7B%0A%20%20display%3A%20none%3B%0A%7D%0A%0A%23bar%20%7B%0A%20%20display%3A%20block%3B%0A%20%20width%3A%20100%25%3B%0A%20%20margin-top%3A%201em%3B%0A%20%20margin-bottom%3A%201em%3B%0A%7D%0A%0A%23line%20%7B%0A%20%20display%3A%20block%3B%0A%20%20position%3A%20relative%3B%0A%20%20top%3A%20-2em%3B%0A%20%20text-align%3A%20center%3B%0A%20%20height%3A%202em%3B%0A%20%20margin-left%3A%202em%3B%0A%20%20margin-right%3A%202em%3B%0A%20%20border%3A%200.2em%20solid%20%23fff%3B%0A%20%20border-bottom%3A%20none%3B%0A%7D%0A%0A%23middle%20%7B%0A%20%20height%3A%204em%3B%0A%20%20position%3A%20relative%3B%0A%20%20top%3A%20-0.2em%3B%0A%20%20border-left%3A%200.1em%20solid%20%23fff%3B%0A%20%20border-right%3A%200.1em%20solid%20%23fff%3B%0A%7D%0A%0A%23marker%20%7B%0A%20%20display%3A%20block%3B%0A%20%20position%3A%20relative%3B%0A%20%20width%3A%204em%3B%0A%20%20height%3A%204em%3B%0A%20%20background-color%3A%20%23eee%3B%0A%20%20border%3A%200.2em%20solid%20%23fff%3B%0A%20%20border-radius%3A%202em%3B%0A%20%20z-index%3A%202%3B%0A%7D%0A%0A%23left_text%2C%20%23right_text%20%7B%0A%20%20font-size%3A%201.2em%3B%0A%20%20position%3A%20relative%3B%0A%20%20top%3A%204.5em%3B%0A%7D%0A%23left_text%20%7B%20%0A%20%20float%3A%20left%3B%0A%7D%0A%23right_text%20%7B%0A%20%20float%3A%20right%3B%0A%7D%0A%0A%40keyframes%20pulse_animation%20%7B%0A%20%20%20%200%25%20%7B%20transform%3A%20scale(1)%3B%20color%3A%20white%3B%7D%0A%20%20%20%2030%25%20%7B%20transform%3A%20scale(1)%3B%20%7D%0A%20%20%20%2040%25%20%7B%20transform%3A%20scale(1.08)%3B%20color%3A%20red%3B%7D%0A%20%20%20%2050%25%20%7B%20transform%3A%20scale(1)%3B%20%7D%0A%20%20%20%2060%25%20%7B%20transform%3A%20scale(1)%3B%20%7D%0A%20%20%20%2070%25%20%7B%20transform%3A%20scale(1.05)%3B%20color%3A%20red%3B%7D%0A%20%20%20%2080%25%20%7B%20transform%3A%20scale(1)%3B%20%7D%0A%20%20%20%20100%25%20%7B%20transform%3A%20scale(1)%3B%20color%3A%20white%3B%7D%0A%7D%0A%0A.pulse%20%7B%0A%20%20%20%20animation-name%3A%20pulse_animation%3B%0A%20%20%20%20animation-duration%3A%202000ms%3B%0A%20%20%20%20transform-origin%3A50%25%2050%25%3B%0A%20%20%20%20animation-iteration-count%3A%20infinite%3B%0A%20%20%20%20animation-timing-function%3A%20linear%3B%0A%7D",
        "source": "library"
      }
    },
    "bundledFiles": {
      "lib/lab.js": {
        "type": "application/javascript"
      },
      "lib/lab.js.map": {
        "type": "text/plain"
      },
      "lib/lab.fallback.js": {
        "type": "application/javascript"
      },
      "lib/lab.legacy.js": {
        "type": "application/javascript"
      },
      "lib/lab.legacy.js.map": {
        "type": "text/plain"
      },
      "lib/lab.css": {
        "type": "text/css"
      },
      "lib/loading.svg": {
        "type": "image/svg+xml"
      }
    }
  }
}